{
  "version": 3,
  "sources": [
    "/deps/alac.js/node_modules/browser-pack/_prelude.js",
    "/deps/alac.js/src/ag_dec.coffee",
    "/deps/alac.js/src/decoder.coffee",
    "/deps/alac.js/src/dp_dec.coffee",
    "/deps/alac.js/src/matrix_dec.coffee"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error(\"Cannot find module '\"+o+\"'\")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "#\n#  Original C(++) version by Apple, http://alac.macosforge.org/\n#\n#  Javascript port by Jens Nockert and Devon Govett of OFMLabs, https://github.com/ofmlabs/alac.js\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\n# File: ag_dec.coffee\n# Contains: Adaptive Golomb decode routines.\n\nclass Aglib\n    PB0 = 40\n    MB0 = 10\n    KB0 = 14\n    MAX_RUN_DEFAULT = 255\n    MAX_PREFIX_16 = 9\n    MAX_PREFIX_32 = 9\n    QBSHIFT = 9\n    QB = 1 << QBSHIFT\n    MMULSHIFT = 2\n    MDENSHIFT = QBSHIFT - MMULSHIFT - 1\n    MOFF = 1 << (MDENSHIFT-2)\n    N_MAX_MEAN_CLAMP = 0xFFFF\n    N_MEAN_CLAMP_VAL = 0xFFFF\n    MMULSHIFT = 2\n    BITOFF = 24\n    MAX_DATATYPE_BITS_16 = 16\n    \n    lead = (input) ->\n        output = 0\n        curbyte = 0\n        \n        while true # emulate goto :)\n            curbyte = input >>> 24\n            break if curbyte\n            output += 8\n            \n            curbyte = input >>> 16\n            break if curbyte & 0xff\n            output += 8\n            \n            curbyte = input >>> 8\n            break if curbyte & 0xff\n            output += 8\n            \n            curbyte = input\n            break if curbyte & 0xff\n            output += 8\n            \n            return output\n            \n        if curbyte & 0xf0\n            curbyte >>>= 4\n        else\n            output += 4\n            \n        if curbyte & 0x8\n            return output\n            \n        if curbyte & 0x4\n            return output + 1\n        \n        if curbyte & 0x2\n            return output + 2\n            \n        if curbyte & 0x1\n            return output + 3\n            \n        # shouldn't get here\n        return output + 4\n    \n    dyn_get_16 = (data, m, k) ->\n        offs = data.bitPosition\n        stream = data.peek(32 - offs) << offs\n        bitsInPrefix = lead(~stream)\n        \n        if bitsInPrefix >= MAX_PREFIX_16\n            data.advance(MAX_PREFIX_16 + MAX_DATATYPE_BITS_16)\n            stream <<= MAX_PREFIX_16\n            result = (stream >>> (32 - MAX_DATATYPE_BITS_16))\n            \n        else\n            data.advance(bitsInPrefix + k)\n            \n            stream <<= (bitsInPrefix + 1)\n            v = (stream >>> (32 - k))\n            result = bitsInPrefix * m + v - 1\n            \n            if v < 2\n                result -= (v - 1)\n            else\n                data.advance(1)\n            \n        \n        return result\n    \n    dyn_get_32 = (data, m, k, maxbits) ->\n        offs = data.bitPosition\n        stream = data.peek(32 - offs) << offs\n        result = lead(~stream)\n        \n        if result >= MAX_PREFIX_32\n            data.advance(MAX_PREFIX_32)\n            return data.read(maxbits)\n        else\n            data.advance(result + 1)\n        \n            if k isnt 1\n                stream <<= (result + 1)\n                result *= m\n                v = (stream >>> (32 - k))\n                \n                data.advance(k - 1)\n                \n                if v > 1\n                    result += v - 1\n                    data.advance(1)\n        \n        return result\n\n    @ag_params: (m, p, k, f, s, maxrun) ->\n        mb:  m\n        mb0: m\n        pb:  p\n        kb:  k\n        wb:  (1 << k) - 1\n        qb:  QB - p\n        fw:  f\n        sw:  s\n        maxrun: maxrun\n        \n    @dyn_decomp: (params, data, pc, samples, maxSize) ->\n        {pb, kb, wb, mb0:mb} = params\n        \n        zmode = 0\n        c = 0\n        \n        while c < samples\n            m = mb >>> QBSHIFT\n            k = Math.min(31 - lead(m + 3), kb)\n            m = (1 << k) - 1\n            \n            n = dyn_get_32(data, m, k, maxSize)\n            \n            # least significant bit is sign bit\n            ndecode = n + zmode\n            multiplier = -(ndecode & 1) | 1\n            pc[c++] = ((ndecode + 1) >>> 1) * multiplier\n            \n            mb = pb * (n + zmode) + mb - ((pb * mb) >> QBSHIFT)\n            \n            # update mean tracking\n            if n > N_MAX_MEAN_CLAMP\n                mb = N_MEAN_CLAMP_VAL\n            \n            zmode = 0\n            \n            if ((mb << MMULSHIFT) < QB) && (c < samples)\n                zmode = 1\n                \n                k = lead(mb) - BITOFF + ((mb + MOFF) >> MDENSHIFT)\n                mz = ((1 << k) - 1) & wb\n                n = dyn_get_16(data, mz, k)\n                \n                unless c + n <= samples\n                    return false\n                    \n                for j in [0...n] by 1\n                    pc[c++] = 0\n                    \n                zmode = 0 if n >= 65535\n                mb = 0\n            \n        \n        return true\n        \nmodule.exports = Aglib\n",
    "#\n#  Original C(++) version by Apple, http://alac.macosforge.org\n#\n#  Javascript port by Jens Nockert and Devon Govett of OFMLabs, https://github.com/ofmlabs/alac.js\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\nAV = require 'av'\nAglib = require './ag_dec'\nDplib = require './dp_dec'\nMatrixlib = require './matrix_dec'\n\nclass ALACDecoder extends AV.Decoder\n    AV.Decoder.register('alac', ALACDecoder)\n    \n    ID_SCE = 0 # Single Channel Element\n    ID_CPE = 1 # Channel Pair Element\n    ID_CCE = 2 # Coupling Channel Element\n    ID_LFE = 3 # LFE Channel Element\n    ID_DSE = 4 # not yet supported\n    ID_PCE = 5\n    ID_FIL = 6\n    ID_END = 7\n    \n    setCookie: (cookie) ->\n        data = AV.Stream.fromBuffer(cookie)\n\n        # For historical reasons the decoder needs to be resilient to magic cookies vended by older encoders.\n        # There may be additional data encapsulating the ALACSpecificConfig. \n        # This would consist of format ('frma') and 'alac' atoms which precede the ALACSpecificConfig. \n        # See ALACMagicCookieDescription.txt in the original Apple decoder for additional documentation \n        # concerning the 'magic cookie'\n        \n        # skip format ('frma') atom if present\n        if data.peekString(4, 4) is 'frma'\n            data.advance(12)\n            \n        # skip 'alac' atom header if present\n        if data.peekString(4, 4) is 'alac'\n            data.advance(12)\n        \n        # read the ALACSpecificConfig    \n        @config =\n            frameLength: data.readUInt32()\n            compatibleVersion: data.readUInt8()\n            bitDepth: data.readUInt8()\n            pb: data.readUInt8()\n            mb: data.readUInt8()\n            kb: data.readUInt8()\n            numChannels: data.readUInt8()\n            maxRun: data.readUInt16()\n            maxFrameBytes: data.readUInt32()\n            avgBitRate: data.readUInt32()\n            sampleRate: data.readUInt32()\n            \n        # CAF files don't encode the bitsPerChannel\n        @format.bitsPerChannel ||= @config.bitDepth\n        \n        # allocate mix buffers\n        @mixBuffers = [\n            new Int32Array(@config.frameLength) # left channel\n            new Int32Array(@config.frameLength) # right channel\n        ]\n        \n        # allocate dynamic predictor buffer\n        predictorBuffer = new ArrayBuffer(@config.frameLength * 4)\n        @predictor = new Int32Array(predictorBuffer)\n        \n        # \"shift off\" buffer shares memory with predictor buffer\n        @shiftBuffer = new Int16Array(predictorBuffer)\n    \n    readChunk: (data) ->\n        return unless @stream.available(4)\n        \n        data = @bitstream\n        samples = @config.frameLength\n        numChannels = @config.numChannels\n        channelIndex = 0\n                \n        output = new ArrayBuffer(samples * numChannels * @config.bitDepth / 8)\n        end = false\n        \n        while not end            \n            # read element tag\n            tag = data.read(3)\n            \n            switch tag\n                when ID_SCE, ID_LFE, ID_CPE\n                    channels = if tag is ID_CPE then 2 else 1\n                \n                    # if decoding this would take us over the max channel limit, bail\n                    if channelIndex + channels > numChannels\n                        throw new Error 'Too many channels!'\n                    \n                    # no idea what this is for... doesn't seem used anywhere\n                    elementInstanceTag = data.read(4)\n                    \n                    # read the 12 unused header bits\n                    unused = data.read(12)\n                    \n                    unless unused is 0\n                        throw new Error 'Unused part of header does not contain 0, it should'\n                    \n                    # read the 1-bit \"partial frame\" flag, 2-bit \"shift-off\" flag & 1-bit \"escape\" flag\n                    partialFrame = data.read(1)\n                    bytesShifted = data.read(2)\n                    escapeFlag = data.read(1)\n                    \n                    if bytesShifted is 3\n                        throw new Error \"Bytes are shifted by 3, they shouldn't be\"\n                    \n                    # check for partial frame to override requested samples\n                    if partialFrame\n                        samples = data.read(32)\n                    \n                    if escapeFlag is 0\n                        shift = bytesShifted * 8\n                        chanBits = @config.bitDepth - shift + channels - 1\n                        \n                        # compressed frame, read rest of parameters\n                        mixBits = data.read(8)\n                        mixRes = data.read(8)\n                        \n                        mode = []\n                        denShift = []\n                        pbFactor = []\n                        num = []\n                        coefs = []\n                        \n                        for ch in [0...channels] by 1\n                            mode[ch] = data.read(4)\n                            denShift[ch] = data.read(4)\n                            pbFactor[ch] = data.read(3)\n                            num[ch] = data.read(5)\n                            table = coefs[ch] = new Int16Array(32)\n                            \n                            for i in [0...num[ch]] by 1\n                                table[i] = data.read(16)\n                        \n                        # if shift active, skip the the shift buffer but remember where it starts\n                        if bytesShifted\n                            shiftbits = data.copy()\n                            data.advance(shift * channels * samples)\n                        \n                        # decompress and run predictors\n                        {mb, pb, kb, maxRun} = @config\n                        \n                        for ch in [0...channels] by 1\n                            params = Aglib.ag_params(mb, (pb * pbFactor[ch]) / 4, kb, samples, samples, maxRun)\n                            status = Aglib.dyn_decomp(params, data, @predictor, samples, chanBits)\n                            unless status\n                                throw new Error 'Error in Aglib.dyn_decomp'\n                        \n                            if mode[ch] is 0\n                                Dplib.unpc_block(@predictor, @mixBuffers[ch], samples, coefs[ch], num[ch], chanBits, denShift[ch])\n                            else\n                                # the special \"numActive == 31\" mode can be done in-place\n                                Dplib.unpc_block(@predictor, @predictor, samples, null, 31, chanBits, 0)\n                                Dplib.unpc_block(@predictor, @mixBuffers[ch], samples, coefs[ch], num[ch], chanBits, denShift[ch])\n                        \n                    else\n                        # uncompressed frame, copy data into the mix buffer to use common output code\n                        chanBits = @config.bitDepth\n                        shift = 32 - chanBits\n                        \n                        for i in [0...samples] by 1\n                            for ch in [0...channels] by 1\n                                val = (data.read(chanBits) << shift) >> shift\n                                @mixBuffers[ch][i] = val\n                        \n                        mixBits = mixRes = 0\n                        bytesShifted = 0\n                    \n                    # now read the shifted values into the shift buffer\n                    if bytesShifted\n                        shift = bytesShifted * 8\n                        for i in [0...samples * channels] by 1\n                            @shiftBuffer[i] = shiftbits.read(shift)\n                    \n                    # un-mix the data and convert to output format\n                    # - note that mixRes = 0 means just interleave so we use that path for uncompressed frames\n                    switch @config.bitDepth\n                        when 16\n                            out16 = new Int16Array(output, channelIndex)\n                            \n                            if channels is 2\n                                Matrixlib.unmix16(@mixBuffers[0], @mixBuffers[1], out16, numChannels, samples, mixBits, mixRes)\n                            else\n                                j = 0\n                                buf = @mixBuffers[0]\n                                for i in [0...samples] by 1\n                                    out16[j] = buf[i]\n                                    j += numChannels\n                                \n                        else\n                            throw new Error 'Only supports 16-bit samples right now'\n                        \n                    channelIndex += channels\n\n                when ID_CCE, ID_PCE\n                    throw new Error \"Unsupported element: #{tag}\"\n                    \n                when ID_DSE\n                    # the tag associates this data stream element with a given audio element\n                    elementInstanceTag = data.read(4)\n                    dataByteAlignFlag = data.read(1)\n                    \n                    # 8-bit count or (8-bit + 8-bit count) if 8-bit count == 255\n                    count = data.read(8)\n                    if count is 255\n                        count += data.read(8)\n                    \n                    # the align flag means the bitstream should be byte-aligned before reading the following data bytes\n                    if dataByteAlignFlag\n                        data.align()\n                        \n                    # skip the data bytes\n                    data.advance(count * 8)\n                    unless data.pos < data.length\n                        throw new Error 'buffer overrun'\n                    \n                when ID_FIL\n                    # 4-bit count or (4-bit + 8-bit count) if 4-bit count == 15\n                \t  # - plus this weird -1 thing I still don't fully understand\n                    count = data.read(4)\n                    if count is 15\n                        count += data.read(8) - 1\n                        \n                    data.advance(count * 8)\n                    unless data.pos < data.length\n                        throw new Error 'buffer overrun'\n                                            \n                when ID_END\n                    data.align()\n                    end = true\n                    \n                else\n                    throw new Error \"Unknown element: #{tag}\"\n            \n            if channelIndex > numChannels\n                throw new Error 'Channel index too large.'\n            \n        return new Int16Array(output)\n        \nmodule.exports = ALACDecoder\n",
    "#\n#  Original C(++) version by Apple, http://alac.macosforge.org/\n#\n#  Javascript port by Jens Nockert and Devon Govett of OFMLabs, https://github.com/ofmlabs/alac.js\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\n# File: dp_dec.coffee\n# Contains: Dynamic Predictor decode routines\n\nclass Dplib\n    copy = (dst, dstOffset, src, srcOffset, n) ->\n        destination = new Uint8Array(dst, dstOffset, n)\n        source = new Uint8Array(src, srcOffset, n)\n        destination.set(source)\n        return dst\n    \n    @unpc_block: (pc1, out, num, coefs, active, chanbits, denshift) ->\n        chanshift = 32 - chanbits\n        denhalf = 1 << (denshift - 1)\n        \n        out[0] = pc1[0];\n        \n        # just copy if active is 0\n        if active is 0\n            return copy(out, 0, pc1, 0, num * 4)\n        \n        # short-circuit if active is 31    \n        if active is 31\n            prev = out[0]\n            \n            for i in [1...num] by 1\n                del = pc1[i] + prev\n                prev = (del << chanshift) >> chanshift\n                out[i] = prev\n            \n            return\n        \n        for i in [1..active] by 1\n            del = pc1[i] + out[i - 1]\n            out[i] = (del << chanshift) >> chanshift\n        \n        lim = active + 1\n        \n        if active is 4\n            # Optimization for active == 4\n            [a0, a1, a2, a3] = coefs\n            \n            for j in [lim...num] by 1\n                top = out[j - lim]\n                offset = j - 1\n                \n                b0 = top - out[offset]\n                b1 = top - out[offset - 1]\n                b2 = top - out[offset - 2]\n                b3 = top - out[offset - 3]\n                \n                sum1 = (denhalf - a0 * b0 - a1 * b1 - a2 * b2 - a3 * b3) >> denshift\n                del = del0 = pc1[j]\n                sg = (-del >>> 31) | (del >> 31)\n                del += top + sum1\n                \n                out[j] = (del << chanshift) >> chanshift\n                \n                if sg > 0\n                    sgn = (-b3 >>> 31) | (b3 >> 31)\n                    a3 -= sgn\n                    del0 -= 1 * ((sgn * b3) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b2 >>> 31) | (b2 >> 31)\n                    a2 -= sgn\n                    del0 -= 2 * ((sgn * b2) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b1 >>> 31) | (b1 >> 31)\n                    a1 -= sgn\n                    del0 -= 3 * ((sgn * b1) >> denshift)\n                    continue if del0 <= 0\n                    \n                    a0 -= (-b0 >>> 31) | (b0 >> 31)\n                    \n                else if sg < 0\n                    # note: to avoid unnecessary negations, we flip the value of \"sgn\"\n                    sgn = -((-b3 >>> 31) | (b3 >> 31))\n                    a3 -= sgn\n                    del0 -= 1 * ((sgn * b3) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b2 >>> 31) | (b2 >> 31))\n                    a2 -= sgn\n                    del0 -= 2 * ((sgn * b2) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b1 >>> 31) | (b1 >> 31))\n                    a1 -= sgn\n                    del0 -= 3 * ((sgn * b1) >> denshift)\n                    continue if del0 >= 0\n                    \n                    a0 += (-b0 >>> 31) | (b0 >> 31)\n                    \n            coefs[0] = a0\n            coefs[1] = a1\n            coefs[2] = a2\n            coefs[3] = a3\n            \n        else if active is 8\n            # Optimization for active == 8\n            [a0, a1, a2, a3, a4, a5, a6, a7] = coefs\n            \n            for j in [lim...num] by 1\n                top = out[j - lim]\n                offset = j - 1\n                \n                b0 = top - out[offset]\n                b1 = top - out[offset - 1]\n                b2 = top - out[offset - 2]\n                b3 = top - out[offset - 3]\n                b4 = top - out[offset - 4]\n                b5 = top - out[offset - 5]\n                b6 = top - out[offset - 6]\n                b7 = top - out[offset - 7]\n                \n                sum1 = (denhalf - a0 * b0 - a1 * b1 - a2 * b2 - a3 * b3 - a4 * b4 - a5 * b5 - a6 * b6 - a7 * b7) >> denshift\n                        \n                del = del0 = pc1[j]\n                sg = (-del >>> 31) | (del >> 31)\n                del += top + sum1\n                \n                out[j] = (del << chanshift) >> chanshift\n                \n                if sg > 0\n                    sgn = (-b7 >>> 31) | (b7 >> 31)\n                    a7 -= sgn\n                    del0 -= 1 * ((sgn * b7) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b6 >>> 31) | (b6 >> 31)\n                    a6 -= sgn\n                    del0 -= 2 * ((sgn * b6) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b5 >>> 31) | (b5 >> 31)\n                    a5 -= sgn\n                    del0 -= 3 * ((sgn * b5) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b4 >>> 31) | (b4 >> 31)\n                    a4 -= sgn\n                    del0 -= 4 * ((sgn * b4) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b3 >>> 31) | (b3 >> 31)\n                    a3 -= sgn\n                    del0 -= 5 * ((sgn * b3) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b2 >>> 31) | (b2 >> 31)\n                    a2 -= sgn\n                    del0 -= 6 * ((sgn * b2) >> denshift)\n                    continue if del0 <= 0\n                    \n                    sgn = (-b1 >>> 31) | (b1 >> 31)\n                    a1 -= sgn\n                    del0 -= 7 * ((sgn * b1) >> denshift)\n                    continue if del0 <= 0\n                    \n                    a0 -= (-b0 >>> 31) | (b0 >> 31)\n                    \n                else if sg < 0\n                    # note: to avoid unnecessary negations, we flip the value of \"sgn\"\n                    sgn = -((-b7 >>> 31) | (b7 >> 31))\n                    a7 -= sgn\n                    del0 -= 1 * ((sgn * b7) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b6 >>> 31) | (b6 >> 31))\n                    a6 -= sgn\n                    del0 -= 2 * ((sgn * b6) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b5 >>> 31) | (b5 >> 31))\n                    a5 -= sgn\n                    del0 -= 3 * ((sgn * b5) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b4 >>> 31) | (b4 >> 31))\n                    a4 -= sgn\n                    del0 -= 4 * ((sgn * b4) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b3 >>> 31) | (b3 >> 31))\n                    a3 -= sgn\n                    del0 -= 5 * ((sgn * b3) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b2 >>> 31) | (b2 >> 31))\n                    a2 -= sgn\n                    del0 -= 6 * ((sgn * b2) >> denshift)\n                    continue if del0 >= 0\n                    \n                    sgn = -((-b1 >>> 31) | (b1 >> 31))\n                    a1 -= sgn\n                    del0 -= 7 * ((sgn * b1) >> denshift)\n                    continue if del0 >= 0\n                    \n                    a0 += (-b0 >>> 31) | (b0 >> 31)\n                \n            coefs[0] = a0\n            coefs[1] = a1\n            coefs[2] = a2\n            coefs[3] = a3\n            coefs[4] = a4\n            coefs[5] = a5\n            coefs[6] = a6\n            coefs[7] = a7\n        \n        else\n            # General case\n            for i in [lim...num] by 1\n                sum1 = 0\n                top = out[i - lim]\n                offset = i - 1\n            \n                for j in [0 ... active] by 1\n                    sum1 += coefs[j] * (out[offset - j] - top)\n            \n                del = del0 = pc1[i]\n                sg  = (-del >>> 31) | (del >> 31)\n            \n                del += top + ((sum1 + denhalf) >> denshift)\n                out[i] = (del << chanshift) >> chanshift\n            \n                if sg > 0\n                    for j in [active - 1 .. 0] by -1\n                        dd = top - out[offset - j]\n                        sgn = (-dd >>> 31) | (dd >> 31)\n                    \n                        coefs[j] -= sgn\n                        del0 -= (active - j) * ((sgn * dd) >> denshift)\n                    \n                        break if del0 <= 0                    \n                \n                else if sg < 0\n                    for j in [active - 1 .. 0] by -1\n                        dd = top - out[offset - j]\n                        sgn = (-dd >>> 31) | (dd >> 31)\n                    \n                        coefs[j] += sgn\n                        del0 -= (active - j) * ((-sgn * dd) >> denshift)\n                    \n                        break if del0 >= 0\n                    \n        return\n        \nmodule.exports = Dplib\n",
    "#\n#  Original C(++) version by Apple, http://alac.macosforge.org/\n#\n#  Javascript port by Jens Nockert and Devon Govett of OFMLabs, https://github.com/ofmlabs/alac.js\n# \n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n# \n#      http://www.apache.org/licenses/LICENSE-2.0\n# \n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\n# File: matrix_dec.coffee\n# Contains: ALAC mixing/matrixing routines to/from 32-bit predictor buffers.\n\nclass Matrixlib\n    @unmix16 = (u, v, out, stride, samples, mixbits, mixres) ->        \n        # Conventional separated stereo\n        if mixres is 0\n            for i in [0...samples] by 1\n                out[i * stride + 0] = u[i]\n                out[i * stride + 1] = v[i]\n            \n        # Matrixed stereo\n        else\n            for i in [0...samples] by 1\n                l = u[i] + v[i] - ((mixres * v[i]) >> mixbits)\n                out[i * stride + 0] = l\n                out[i * stride + 1] = l - v[i]\n                \n        return\n    \n    # unmix20\n    # unmix24\n    # unmix 32\n    \nmodule.exports = Matrixlib\n"
  ]
}